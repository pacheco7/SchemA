<?xml version="1.0" encoding="utf-8"?>
<PROG NAME="Z_SCHEMA_CONSTRUCTOR" VARCL="X" DBAPL="S" DBNA="D$" SUBC="I" RMAND="001" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
 <textPool>
  <language SPRAS="D">
   <textElement ID="R" ENTRY="schema.org: INCLUDE for all constructor methods" LENGTH="47 "/>
  </language>
 </textPool>
 <source>*&amp;---------------------------------------------------------------------*
*&amp;  Include  z_schema_constructor
*&amp;---------------------------------------------------------------------*

*&amp;---------------------------------------------------------------------*
*&amp; SchemA
*&amp; The schema.org ABAP Framework
*&amp; Copyright (C) 2016 Uwe Fetzer together with the SCN ABAP community
*&amp;
*&amp; Project home: https://github.com/se38/SchemA
*&amp;
*&amp; Published under Apache License, Version 2.0
*&amp; http://www.apache.org/licenses/LICENSE-2.0.html
*&amp;---------------------------------------------------------------------*

    CHECK i_json IS NOT INITIAL.
    DATA(json_doc) = zcl_json_document=&gt;create_with_json( i_json ).

**********************************************************************
* with describe_by_name we only get the attributes of the current
* class, but we need also the attributes for the super classes
* (complete hierarchy) -&gt; this code must be included in all
* constructor methods:
* &quot;INCLUDE z_schema_constructor_super.&quot;
**********************************************************************

    DATA descr TYPE REF TO cl_abap_classdescr.
    DATA classname TYPE c LENGTH 30.
    classname = sy-repid(30).
    TRANSLATE classname USING &apos;= &apos;.
    descr ?= cl_abap_typedescr=&gt;describe_by_name( classname ).
    CHECK descr IS BOUND.

    &quot;*--- try to get values for all attributes of the current class ---*
    LOOP AT descr-&gt;attributes ASSIGNING FIELD-SYMBOL(&lt;attribute&gt;) WHERE is_constant IS INITIAL.

      DATA(attribute_name) = to_lower( &lt;attribute&gt;-name ).
      REPLACE ALL OCCURRENCES OF &apos;_&apos; IN attribute_name WITH ``.

      &quot;*--- read value from JSON ---*
      DATA attribute_value TYPE string.
      CLEAR attribute_value.
      attribute_value = json_doc-&gt;get_value( COND #( WHEN attribute_name = &apos;id&apos; THEN |@id|
                                                     ELSE |{ attribute_name }|
                                           ) ).

      CHECK attribute_value IS NOT INITIAL.

      &quot;*--- call the setter method of this attribute ---*
      DATA parameters TYPE abap_parmbind_tab.
      DATA parameter TYPE abap_parmbind.

      CLEAR parameters.
      parameter-name = |I_{ &lt;attribute&gt;-name }|.
      parameter-value = REF #( attribute_value ).
      INSERT parameter INTO TABLE parameters.

      IF &lt;attribute&gt;-type_kind = &apos;r&apos;         &quot;Object  -&gt; call with JSON as data
      OR &lt;attribute&gt;-type_kind = &apos;h&apos;         &quot;Table   -&gt; call with JSON as data
      OR &lt;attribute&gt;-type_kind = &apos;D&apos;         &quot;Date    -&gt; call with JSON as data
      OR &lt;attribute&gt;-type_kind = &apos;I&apos;.        &quot;Integer -&gt; call with JSON as data
        DATA(method_name) = |SET_{ &lt;attribute&gt;-name }_JSON|.
      ELSE.
        method_name = |SET_{ &lt;attribute&gt;-name }|.
      ENDIF.

      TRY.
          CALL METHOD (method_name)
            PARAMETER-TABLE parameters.
        CATCH cx_sy_dyn_call_illegal_method INTO DATA(zx) ##no_handler.
      ENDTRY.

    ENDLOOP.</source>
</PROG>
